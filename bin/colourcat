from __future__ import print_function

import sys
import argparse

import pygments
from pygments import lexers, formatters, console

# default formatter and lexer
default_formatter = formatters.TerminalFormatter()
default_lexer = lexers.TextLexer()

# styles
filename_style = console.codes['yellow'] + console.codes['underline']
number_style = console.codes['standout'] #italics
error_style = console.codes['red']
reset_style = console.codes['reset']


def try_lexer(function, *args, **kwargs):
    try:
        return function(*args, **kwargs)
    except pygments.util.ClassNotFound:
        return None

def highlight_file(filename, **kwargs):
    with open(filename) as f:
        text = f.read()

    lexer = try_lexer(lexers.get_lexer_for_filename, filename)
    lexer = lexer or try_lexer(lexers.guess_lexer, text)
    lexer = lexer or default_lexer

    highlight(text, lexer, default_formatter, **kwargs)

def highlight_text(text, **kwargs):
    lexer = try_lexer(lexers.guess_lexer, text)
    lexer = lexer or default_lexer

    highlight(text, lexer, default_formatter, **kwargs)


def highlight_stdin(**kwargs):
    highlight_text(sys.stdin.read(), **kwargs)

def highlight(text, lexer, formatter, **kwargs):
    highlighted = pygments.highlight(text, lexer, formatter)

    if kwargs['number_lines']:
        highlighted = highlighted.splitlines()
        columns = max(len(str(len(highlighted))), 6)
        number_format = '{}{{:>{}}}{}'.format(number_style, columns, reset_style)
        for lineno, line in enumerate(highlighted, 1):
            print(number_format.format(lineno), '\t', line)

    else:
        print(highlighted)


## main

parser = argparse.ArgumentParser(description="Coloured cat")
parser.add_argument('-n', action='store_true', help='number lines of output', dest='number_lines')
parser.add_argument('files', nargs='*')

args = parser.parse_args()
kwargs = vars(args)
multiple = len(args.files) > 1

for filename in args.files:
    if filename == '-':
        if multiple:
            print('{}==> standard input <=={}'.format(filename_style, reset_style))
        highlight_stdin(**kwargs)
        continue

    if multiple:
        print('{}==> {} <=={}'.format(filename_style, filename, reset_style))

    try:
        highlight_file(filename, **kwargs)
    except (IOError, OSError) as e:
        print(error_style, e, reset_style)

if not args.files:
    highlight_stdin(**kwargs)

