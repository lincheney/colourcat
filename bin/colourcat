from __future__ import print_function

import sys
import argparse

import pygments
from pygments import lexers, formatters, console

# default formatter and lexer
default_formatter = formatters.TerminalFormatter()
default_lexer = lexers.TextLexer()

# styles
filename_style = console.codes['yellow'] + console.codes['underline']
number_style = console.codes['standout']
error_style = console.codes['red']
reset_style = console.codes['reset']


def try_lexer(function, *args, **kwargs):
    try:
        return function(*args, **kwargs)
    except pygments.util.ClassNotFound:
        return None

def highlight_file(filename):
    with open(filename) as f:
        text = f.read()

    lexer = try_lexer(lexers.get_lexer_for_filename, filename)
    lexer = lexer or try_lexer(lexers.guess_lexer, text)
    lexer = lexer or default_lexer

    highlight(text, lexer, default_formatter)

def highlight(text, lexer, formatter):
    highlighted = pygments.highlight(text, lexer, formatter)
    print(highlighted)


## main

parser = argparse.ArgumentParser(description = "Coloured cat")
parser.add_argument('files', nargs='*')

args = parser.parse_args()

for filename in args.files:
    try:
        highlight_file(filename)
    except (IOError, OSError) as e:
        print(error_style, e, reset_style)

