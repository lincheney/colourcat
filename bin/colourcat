from __future__ import print_function

import sys
import os
import argparse
import errno
import functools
import re

# set default separator
print = functools.partial(print, sep='')

import magic
import pygments
from pygments import lexers, formatters
from pygments.console import codes, esc

# default formatter and lexer
default_formatter = formatters.TerminalFormatter()
#default_lexer = lexers.TextLexer()
DARKBG = default_formatter.darkbg

# styles
number_style = codes['standout'] #italics
error_style = codes['red']
binary_style = codes['brown']
whitespace_style = esc+('48;5;235m', '48;5;255m')[DARKBG]
reset_style = codes['reset']

filename_header_style = (esc+'48;5;237m', codes['black'] + esc+'48;5;253m')[DARKBG]
dirname_style = filename_header_style
basename_style = codes['bold'] + ('', codes['black'])[DARKBG]

filename_format = '{h}==> {r}{d}{{}}{r}{b}{{}}{r}{h} <=={r}'.format(
    h=filename_header_style,
    d=dirname_style,
    b=basename_style,
    r=reset_style,
)

class BinaryFileException(Exception):
    def __init__(self, text):
        self.text = text

encoding_detector = magic.Magic(mime_encoding=True)
def is_binary(blob):
    return blob and (encoding_detector.from_buffer(blob) == b'binary')


def try_lexer(function, *args, **kwargs):
    try:
        return function(*args, **kwargs)
    except pygments.util.ClassNotFound:
        return None

def highlight_file(filename):
    with open(filename, 'rb') as f:
        text = f.read()
    if is_binary(text):
        raise BinaryFileException(text)

    text = text.decode('utf-8')
    lexer = try_lexer(lexers.get_lexer_for_filename, filename)
    lexer = lexer or try_lexer(lexers.guess_lexer, text[:1024])

    return highlight(text, lexer, default_formatter)

def highlight_text(text):
    if is_binary(text):
        raise BinaryFileException(text)
    lexer = try_lexer(lexers.guess_lexer, text[:1024])
    return highlight(text, lexer, default_formatter)

def highlight_stdin():
    return highlight_text(sys.stdin.read())

#def highlight(text, lexer, formatter):
#    return pygments.highlight(text, lexer, formatter)
highlight = pygments.highlight

def print_buffer(buffer, number_lines, highlight_ws, **kwargs):
    try:
        if not number_lines and not highlight_ws:
            print(buffer)
            return

        buffer = buffer.splitlines()
        if number_lines:
            columns = max(len(str(len(buffer))), 6)
            number_format = '{}{{:>{}}}{}|'.format(number_style, columns, reset_style)

        for lineno, line in enumerate(buffer, 1):
            if line.endswith(reset_style):
                line = line[:-len(reset_style)]

            if number_lines:
                print(number_format.format(lineno), '\t', end='')
            if highlight_ws:
                line = re.sub(r'(\s*)$', whitespace_style + r'\1', line)

            print(line, reset_style)
    except IOError as e:
        if e.errno == errno.EPIPE:
            sys.exit()
        raise


def main(files, filename_header, **kwargs):
    if not files:
        files.append('-')

    filename_header = filename_header or len(files) > 1
    for i, filename in enumerate(files):
        if i != 0:
            print()

        if filename == '-':
            printed_filename = 'standard input'
        else:
            printed_filename = filename

        if filename_header:
            dirname, basename = os.path.split(printed_filename)
            if dirname:
                dirname += os.sep
            print(filename_format.format(dirname, basename))

        try:
            if filename == '-':
                highlighted = highlight_stdin()
            else:
                highlighted = highlight_file(filename)
        except (IOError, OSError) as e:
            print(error_style, e, reset_style)
        except BinaryFileException as e:
            if kwargs['output_binary']:
                print_buffer(e.text, number_lines=False, highlight_ws=False)
            else:
                print(binary_style, '[{} is a binary file]'.format(printed_filename), reset_style)
        else:
            print_buffer(highlighted, **kwargs)

parser = argparse.ArgumentParser(description="Coloured cat")
parser.add_argument('-n', action='store_true', help='number lines of output', dest='number_lines')
parser.add_argument('-b', action='store_true', help='force dump binary files', dest='output_binary')
parser.add_argument('-s', action='store_true', help='highlight trailing whitespace', dest='highlight_ws')
parser.add_argument('--header', action='store_true', help='always print filename header', dest='filename_header')
parser.add_argument('files', nargs='*')

args = parser.parse_args()
try:
    main(**vars(args))
except KeyboardInterrupt:
    pass

